#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
# shadow-status.sh - Show status of all shadow repositories

# Colors for output (with NO_COLOR support)
if [ -n "${NO_COLOR:-}" ] || [ ! -t 1 ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    CYAN=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    CYAN='\033[0;36m'
    NC='\033[0m' # No Color
fi

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Get repo root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null) || {
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
}

SHADOWFILE="$REPO_ROOT/.shadowfile"

echo -e "${BLUE}Shadow Repository Status${NC}"
echo "Main repository: $(basename "$REPO_ROOT")"
echo

# Check for .shadowfile
if [ ! -f "$SHADOWFILE" ]; then
    echo -e "${YELLOW}No .shadowfile found${NC}"
    echo "Create .shadowfile with paths to shadow repositories"
    exit 1
fi

# Header
printf "%-30s %-8s %-8s %-12s %-12s %s\n" "SHADOW REPO" "EXISTS" "LINKS" "UNCOMMITTED" "UNPUSHED" "PATH"
printf "%s\n" "--------------------------------------------------------------------------------"

# Function to count symlinks from main repo to shadow
count_symlinks() {
    local shadow_path="$1"
    local count=0
    
    # Find all symlinks in main repo
    while IFS= read -r -d '' symlink; do
        target=$(readlink "$symlink" 2>/dev/null || true)
        
        # Convert to absolute path if relative
        if [ -n "$target" ]; then
            if [[ "$target" != /* ]]; then
                symlink_dir=$(dirname "$symlink")
                target_abs=$(cd "$symlink_dir" && realpath -m "$target" 2>/dev/null) || continue
            else
                target_abs="$target"
            fi
            
            # Check if target is within this shadow repo
            if [[ "$target_abs" == "$shadow_path"* ]]; then
                count=$((count + 1))
            fi
        fi
    done < <(find "$REPO_ROOT" -type l -print0 2>/dev/null | grep -zv "^$REPO_ROOT/\.git")
    
    echo "$count"
}

# Process each shadow repo
TOTAL_REPOS=0
EXISTING_REPOS=0
TOTAL_LINKS=0
HAS_ENTRIES=false

while IFS= read -r line; do
    # Skip comments and empty lines
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    
    HAS_ENTRIES=true
    
    # Convert to absolute path
    if [[ "$line" == /* ]]; then
        SHADOW_ABS="$line"
    else
        SHADOW_ABS="$REPO_ROOT/$line"
    fi
    
    # Normalize path
    SHADOW_ABS=$(realpath -m "$SHADOW_ABS")
    SHADOW_NAME=$(basename "$SHADOW_ABS")
    
    TOTAL_REPOS=$((TOTAL_REPOS + 1))
    
    # Check existence
    if [ -d "$SHADOW_ABS" ]; then
        EXISTS="${GREEN}Yes${NC}"
        EXISTING_REPOS=$((EXISTING_REPOS + 1))
        
        # Count symlinks
        LINK_COUNT=$(count_symlinks "$SHADOW_ABS")
        TOTAL_LINKS=$((TOTAL_LINKS + LINK_COUNT))
        
        if [ "$LINK_COUNT" -eq 0 ]; then
            LINKS="${YELLOW}0${NC}"
        else
            LINKS="${GREEN}${LINK_COUNT}${NC}"
        fi
        
        # Check git status if it's a git repo
        if [ -d "$SHADOW_ABS/.git" ]; then
            # Check for uncommitted changes
            UNCOMMITTED_COUNT=$(cd "$SHADOW_ABS" && git status --porcelain 2>/dev/null | wc -l || echo "0")
            if [ "$UNCOMMITTED_COUNT" -gt 0 ]; then
                UNCOMMITTED="${YELLOW}${UNCOMMITTED_COUNT} files${NC}"
            else
                UNCOMMITTED="${GREEN}Clean${NC}"
            fi
            
            # Check for unpushed commits
            if cd "$SHADOW_ABS" && git remote 2>/dev/null | grep -q origin; then
                CURRENT_BRANCH=$(cd "$SHADOW_ABS" && git branch --show-current 2>/dev/null || echo "main")
                UNPUSHED=$(cd "$SHADOW_ABS" && git rev-list --count origin/${CURRENT_BRANCH}..HEAD 2>/dev/null || echo "?")
                
                if [ "$UNPUSHED" = "?" ]; then
                    UNPUSHED_STATUS="${YELLOW}No upstream${NC}"
                elif [ "$UNPUSHED" -gt 0 ]; then
                    UNPUSHED_STATUS="${YELLOW}${UNPUSHED} commits${NC}"
                else
                    UNPUSHED_STATUS="${GREEN}Synced${NC}"
                fi
            else
                UNPUSHED_STATUS="${CYAN}No remote${NC}"
            fi
        else
            UNCOMMITTED="${CYAN}Not git${NC}"
            UNPUSHED_STATUS="${CYAN}Not git${NC}"
        fi
    else
        EXISTS="${RED}No${NC}"
        LINKS="${RED}-${NC}"
        UNCOMMITTED="${RED}-${NC}"
        UNPUSHED_STATUS="${RED}-${NC}"
    fi
    
    # Print row
    printf "%-30s %-18s %-18s %-22s %-22s %s\n" \
        "$SHADOW_NAME" \
        "$EXISTS" \
        "$LINKS" \
        "$UNCOMMITTED" \
        "$UNPUSHED_STATUS" \
        "$line"
        
done < "$SHADOWFILE"

# Check if shadowfile was empty or had no valid entries
if [ "$HAS_ENTRIES" = "false" ]; then
    echo -e "${YELLOW}No shadow repositories configured in .shadowfile${NC}"
    echo
    exit 0
fi

# Summary
echo
echo "Summary:"
echo "  Total shadow repositories: $TOTAL_REPOS"
echo "  Existing repositories: $EXISTING_REPOS"
echo "  Total active symlinks: $TOTAL_LINKS"

# Check .git/info/exclude
if [ -f "$REPO_ROOT/.git/info/exclude" ]; then
    EXCLUDE_COUNT=$(grep -c "^[^#]" "$REPO_ROOT/.git/info/exclude" 2>/dev/null || echo "0")
    echo "  Git exclude entries: $EXCLUDE_COUNT"
fi

# Warnings
echo
if [ "$EXISTING_REPOS" -lt "$TOTAL_REPOS" ]; then
    echo -e "${YELLOW}⚠ Some shadow repositories don't exist yet${NC}"
fi

if [ "$TOTAL_LINKS" -eq 0 ] && [ "$EXISTING_REPOS" -gt 0 ]; then
    echo -e "${YELLOW}⚠ No active symlinks found - run shadow-sync to create them${NC}"
fi

exit 0