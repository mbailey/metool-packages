#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
# shadow-add.sh - Add a shadow repository to .shadowfile

# Colors for output (with NO_COLOR support)
if [ -n "${NO_COLOR:-}" ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
fi

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Get repo root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null) || {
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
}

SHADOWFILE="$REPO_ROOT/.shadowfile"
REPO_NAME=$(basename "$REPO_ROOT")

echo -e "${BLUE}Shadow Add${NC}"
echo "Add shadow repository to: $(basename "$REPO_ROOT")"
echo

# Show current status first
if [ -f "$SHADOWFILE" ]; then
    echo "Current shadow repositories:"
    "$SCRIPT_DIR/shadow-status" 2>/dev/null | grep -A100 "^SHADOW REPO" || true
    echo
fi

# Function to make path relative to repo root
make_relative_path() {
    local abs_path="$1"
    local repo_dir=$(dirname "$REPO_ROOT")
    
    # Try to make it relative to parent directory
    if [[ "$abs_path" == "$repo_dir"/* ]]; then
        echo "../${abs_path#$repo_dir/}"
    else
        # If not under parent dir, use absolute path
        echo "$abs_path"
    fi
}

# Function to check if shadow already exists in file
shadow_exists() {
    local shadow_path="$1"
    
    if [ ! -f "$SHADOWFILE" ]; then
        return 1
    fi
    
    # Normalize the path for comparison
    local norm_path=$(realpath -m "$REPO_ROOT/$shadow_path" 2>/dev/null || echo "$shadow_path")
    
    while IFS= read -r line; do
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ -z "${line// }" ]] && continue
        
        # Normalize each existing path
        local existing_norm
        if [[ "$line" == /* ]]; then
            existing_norm=$(realpath -m "$line" 2>/dev/null || echo "$line")
        else
            existing_norm=$(realpath -m "$REPO_ROOT/$line" 2>/dev/null || echo "$REPO_ROOT/$line")
        fi
        
        if [ "$existing_norm" = "$norm_path" ]; then
            return 0
        fi
    done < "$SHADOWFILE"
    
    return 1
}

# Check if a path was provided
if [ $# -gt 0 ]; then
    SHADOW_PATH="$1"
    
    # Check if it already exists
    if shadow_exists "$SHADOW_PATH"; then
        echo -e "${YELLOW}Shadow repository already in .shadowfile: $SHADOW_PATH${NC}"
        exit 0
    fi
    
    # Add to shadowfile
    echo "Adding: $SHADOW_PATH"
    
    # Create shadowfile if it doesn't exist
    if [ ! -f "$SHADOWFILE" ]; then
        echo "# Shadow repositories for $(basename "$REPO_ROOT")" > "$SHADOWFILE"
        echo "# One path per line, comments start with #" >> "$SHADOWFILE"
        echo "" >> "$SHADOWFILE"
    fi
    
    # Add the shadow path
    echo "$SHADOW_PATH" >> "$SHADOWFILE"
    
    echo -e "${GREEN}✓ Added to .shadowfile${NC}"
    
else
    # Interactive mode - offer suggestions
    echo "Searching for potential shadow repositories..."
    echo
    
    # Look for existing shadow repos
    PARENT_DIR=$(dirname "$REPO_ROOT")
    SUGGESTIONS=()
    
    # Standard patterns
    for pattern in "$REPO_NAME-shadow" "shadow-$REPO_NAME" "shadow-tasks" "shadow-private"; do
        if [ -d "$PARENT_DIR/$pattern" ]; then
            SUGGESTIONS+=("../$pattern")
        fi
    done
    
    # Look one level up too
    GRANDPARENT=$(dirname "$PARENT_DIR")
    for pattern in "shadow-tasks" "shadow-shared"; do
        if [ -d "$GRANDPARENT/$pattern" ]; then
            rel_path=$(make_relative_path "$GRANDPARENT/$pattern")
            SUGGESTIONS+=("$rel_path")
        fi
    done
    
    if [ ${#SUGGESTIONS[@]} -gt 0 ]; then
        echo "Found potential shadow repositories:"
        for i in "${!SUGGESTIONS[@]}"; do
            echo "  $((i+1))) ${SUGGESTIONS[$i]}"
        done
        echo "  n) Create new shadow repository"
        echo "  c) Enter custom path"
        echo "  s) Skip"
        
        read -p "Choice: " choice
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#SUGGESTIONS[@]} ]; then
            SHADOW_PATH="${SUGGESTIONS[$((choice-1))]}"
        elif [ "$choice" = "n" ]; then
            # Create new
            echo
            echo "Create new shadow repository:"
            echo "  1) $REPO_NAME-shadow (repo-specific)"
            echo "  2) shadow-tasks (shared tasks)"
            echo "  3) Custom name"
            
            read -p "Choice [1-3]: " create_choice
            
            case $create_choice in
                1)
                    SHADOW_PATH="../$REPO_NAME-shadow"
                    ;;
                2)
                    SHADOW_PATH="../shadow-tasks"
                    ;;
                3)
                    read -p "Shadow repo name: " shadow_name
                    SHADOW_PATH="../$shadow_name"
                    ;;
                *)
                    echo "Invalid choice"
                    exit 1
                    ;;
            esac
            
            # Create the shadow repo
            SHADOW_ABS="$REPO_ROOT/$SHADOW_PATH"
            mkdir -p "$SHADOW_ABS"
            (
                cd "$SHADOW_ABS"
                git init
                
                # Determine shadow type based on name
                SHADOW_BASENAME=$(basename "$SHADOW_ABS")
                if [[ "$SHADOW_BASENAME" =~ ^shadow- ]]; then
                    # Multi-repo shadow - create subdirectory for current repo
                    echo "# Multi-Repository Shadow" > README.md
                    echo "" >> README.md
                    echo "This shadow repository contains content for multiple projects." >> README.md
                    echo "" >> README.md
                    echo "## Structure" >> README.md
                    echo "Each subdirectory corresponds to a project that uses this shadow." >> README.md
                    
                    # Create subdirectory for current repo
                    mkdir -p "$REPO_NAME"
                    echo "# $REPO_NAME Shadow Content" > "$REPO_NAME/README.md"
                    echo "" >> "$REPO_NAME/README.md"
                    echo "This directory contains shadow content for the $REPO_NAME project." >> "$REPO_NAME/README.md"
                    
                    git add README.md "$REPO_NAME/README.md"
                    git commit -m "Initial multi-repo shadow with $REPO_NAME"
                else
                    # Single-repo shadow
                    echo "# Shadow Repository" > README.md
                    echo "" >> README.md
                    echo "Shadow repository for: $REPO_NAME" >> README.md
                    
                    git add README.md
                    git commit -m "Initial shadow repository for $REPO_NAME"
                fi
            )
            echo -e "${GREEN}✓ Created shadow repository${NC}"
            
        elif [ "$choice" = "c" ]; then
            read -p "Enter shadow path: " SHADOW_PATH
        else
            echo "Cancelled"
            exit 0
        fi
    else
        echo "No existing shadow repositories found."
        read -p "Enter shadow path (or press Enter to cancel): " SHADOW_PATH
        
        if [ -z "$SHADOW_PATH" ]; then
            echo "Cancelled"
            exit 0
        fi
    fi
    
    # Check if already exists
    if shadow_exists "$SHADOW_PATH"; then
        echo -e "${YELLOW}Shadow repository already in .shadowfile: $SHADOW_PATH${NC}"
        exit 0
    fi
    
    # Add to shadowfile
    echo
    echo "Adding: $SHADOW_PATH"
    
    # Create shadowfile if needed
    if [ ! -f "$SHADOWFILE" ]; then
        echo "# Shadow repositories for $(basename "$REPO_ROOT")" > "$SHADOWFILE"
        echo "# One path per line, comments start with #" >> "$SHADOWFILE"
        echo "" >> "$SHADOWFILE"
    fi
    
    # Add the path
    echo "$SHADOW_PATH" >> "$SHADOWFILE"
    
    echo -e "${GREEN}✓ Added to .shadowfile${NC}"
fi

# Update git excludes
echo
echo "Updating git excludes..."
"$SCRIPT_DIR/shadow-sync-excludes" 2>&1 | tail -5

echo
echo "Next steps:"
echo "  1. Run 'shadow-sync' to create symlinks"
echo "  2. Use 'shadow-extract' to move content to shadow repos"