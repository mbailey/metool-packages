#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
# shadow-sync-repos.sh - Commit, pull, and push changes in shadow repositories

# Colors for output (with NO_COLOR support)
if [ -n "${NO_COLOR:-}" ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
fi

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Get repo root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null) || {
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
}

SHADOWFILE="$REPO_ROOT/.shadowfile"

echo -e "${BLUE}Shadow Sync Repos${NC}"
echo "Synchronizing shadow repository git status..."
echo

# Check for .shadowfile
if [ ! -f "$SHADOWFILE" ]; then
    echo -e "${YELLOW}No .shadowfile found${NC}"
    exit 1
fi

# Process each shadow repo
TOTAL_REPOS=0
REPOS_UPDATED=0

while IFS= read -r line; do
    # Skip comments and empty lines
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    
    # Convert to absolute path
    if [[ "$line" == /* ]]; then
        SHADOW_ABS="$line"
    else
        SHADOW_ABS="$REPO_ROOT/$line"
    fi
    
    # Normalize path
    SHADOW_ABS=$(realpath -m "$SHADOW_ABS")
    
    echo
    echo -e "${BLUE}Shadow: $line${NC}"
    echo "Path: $SHADOW_ABS"
    
    # Check if shadow exists and is a git repo
    if [ ! -d "$SHADOW_ABS" ]; then
        echo -e "  ${YELLOW}Warning: Directory not found${NC}"
        continue
    fi
    
    if [ ! -d "$SHADOW_ABS/.git" ]; then
        echo -e "  ${YELLOW}Warning: Not a git repository${NC}"
        echo "  Initializing as git repository..."
        (
            cd "$SHADOW_ABS"
            git init
            git add -A
            git commit -m "Initial commit" || true
        )
    fi
    
    TOTAL_REPOS=$((TOTAL_REPOS + 1))
    
    # Work in the shadow repo
    (
        cd "$SHADOW_ABS"
        
        # Check for uncommitted changes
        if [ -n "$(git status --porcelain)" ]; then
            echo -e "  ${YELLOW}Uncommitted changes found${NC}"
            git status --short
            
            echo
            read -p "  Commit these changes? [Y/n] " -n 1 -r
            echo
            
            if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                # Stage all changes
                git add -A
                
                # Get commit message
                read -p "  Commit message: " commit_msg
                if [ -z "$commit_msg" ]; then
                    commit_msg="Shadow sync: Update $(date +%Y-%m-%d)"
                fi
                
                git commit -m "$commit_msg"
                echo -e "  ${GREEN}✓ Changes committed${NC}"
                REPOS_UPDATED=$((REPOS_UPDATED + 1))
            fi
        else
            echo -e "  ${GREEN}✓ No uncommitted changes${NC}"
        fi
        
        # Check if we have a remote
        if git remote | grep -q origin; then
            echo "  Checking remote status..."
            
            # Fetch remote
            git fetch origin 2>/dev/null || {
                echo -e "  ${YELLOW}Warning: Could not fetch from remote${NC}"
            }
            
            # Get current branch
            CURRENT_BRANCH=$(git branch --show-current)
            
            # Check if we're behind
            BEHIND=$(git rev-list --count HEAD..origin/$CURRENT_BRANCH 2>/dev/null || echo "0")
            AHEAD=$(git rev-list --count origin/$CURRENT_BRANCH..HEAD 2>/dev/null || echo "0")
            
            if [ "$BEHIND" -gt 0 ]; then
                echo -e "  ${YELLOW}Behind remote by $BEHIND commits${NC}"
                read -p "  Pull changes? [Y/n] " -n 1 -r
                echo
                
                if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                    git pull --rebase origin "$CURRENT_BRANCH"
                    echo -e "  ${GREEN}✓ Pulled latest changes${NC}"
                    REPOS_UPDATED=$((REPOS_UPDATED + 1))
                fi
            fi
            
            if [ "$AHEAD" -gt 0 ]; then
                echo -e "  ${YELLOW}Ahead of remote by $AHEAD commits${NC}"
                read -p "  Push changes? [Y/n] " -n 1 -r
                echo
                
                if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
                    git push origin "$CURRENT_BRANCH"
                    echo -e "  ${GREEN}✓ Pushed to remote${NC}"
                    REPOS_UPDATED=$((REPOS_UPDATED + 1))
                fi
            fi
            
            if [ "$BEHIND" -eq 0 ] && [ "$AHEAD" -eq 0 ]; then
                echo -e "  ${GREEN}✓ In sync with remote${NC}"
            fi
        else
            echo -e "  ${YELLOW}No remote configured${NC}"
            echo "  To add a remote: cd $SHADOW_ABS && git remote add origin <url>"
        fi
    )
    
done < "$SHADOWFILE"

echo
echo -e "${GREEN}Shadow Repository Sync Complete${NC}"
echo
echo "Summary:"
echo "  Total shadow repositories: $TOTAL_REPOS"
echo "  Repositories updated: $REPOS_UPDATED"