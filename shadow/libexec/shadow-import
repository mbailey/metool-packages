#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
#
# shadow-import.sh - Import content from shadow repo into main repo
#
# This script removes symlinks and copies the actual content from shadow
# repositories into the main repository, effectively "de-shadowing" content.
#
# Usage: shadow-import.sh <file-or-directory-path>
#
# Example:
#   shadow-import.sh docs/tasks/private
#   shadow-import.sh docs/promote-private/strategy.md

# Colors for output (with NO_COLOR support)
if [ -n "${NO_COLOR:-}" ]; then
    RED=''
    GREEN=''
    YELLOW=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    NC='\033[0m' # No Color
fi

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Parse arguments
FORCE=false
TARGET_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS] <file-or-directory-path>"
            echo "Import content from shadow repository into main repository"
            echo ""
            echo "Options:"
            echo "  -f, --force    Skip confirmation prompt"
            echo "  -h, --help     Show this help message"
            exit 0
            ;;
        -*)
            echo "Error: Unknown option $1" >&2
            exit 1
            ;;
        *)
            if [[ -n "$TARGET_PATH" ]]; then
                echo "Error: Multiple paths specified" >&2
                exit 1
            fi
            TARGET_PATH="$1"
            shift
            ;;
    esac
done

if [[ -z "$TARGET_PATH" ]]; then
    echo "Usage: $0 [OPTIONS] <file-or-directory-path>"
    echo "Import content from shadow repository into main repository"
    exit 1
fi

# Get absolute path without resolving symlinks
if [[ "$TARGET_PATH" = /* ]]; then
    ABS_PATH="$TARGET_PATH"
else
    ABS_PATH="$(pwd)/$TARGET_PATH"
fi

# Normalize path manually (remove trailing slash, clean up ..) 
# but do NOT resolve symlinks
ABS_PATH="${ABS_PATH%/}"  # Remove trailing slash
# We intentionally avoid realpath here to preserve symlinks


# Check if target exists
if [[ ! -e "$ABS_PATH" ]]; then
    echo -e "${RED}Error: Path does not exist: $ABS_PATH${NC}"
    exit 1
fi

# Check if it's a symlink
if [[ ! -L "$ABS_PATH" ]]; then
    echo -e "${YELLOW}Warning: $ABS_PATH is not a symlink${NC}"
    echo "This path is already regular content in the repository"
    exit 0
fi

# Get the symlink target
LINK_TARGET=$(readlink "$ABS_PATH")
echo -e "${GREEN}Found symlink:${NC} $ABS_PATH -> $LINK_TARGET"

# Resolve to absolute path if relative
if [[ "$LINK_TARGET" != /* ]]; then
    LINK_DIR=$(dirname "$ABS_PATH")
    SHADOW_SOURCE="$LINK_DIR/$LINK_TARGET"
else
    SHADOW_SOURCE="$LINK_TARGET"
fi

# Normalize the shadow source path
SHADOW_SOURCE=$(readlink -f "$SHADOW_SOURCE" 2>/dev/null || realpath "$SHADOW_SOURCE" 2>/dev/null || echo "$SHADOW_SOURCE")

# Check if shadow source exists
if [[ ! -e "$SHADOW_SOURCE" ]]; then
    echo -e "${RED}Error: Shadow source does not exist: $SHADOW_SOURCE${NC}"
    echo "The symlink appears to be broken"
    exit 1
fi

# Confirm the import
echo ""
echo "This will import content from the shadow repository:"
echo -e "  ${YELLOW}From:${NC} $SHADOW_SOURCE"
echo -e "  ${YELLOW}To:${NC}   $ABS_PATH"
echo ""

if [[ "$FORCE" == "true" ]]; then
    echo "Forcing import without confirmation..."
elif [[ ! -t 0 ]]; then
    echo "Non-interactive mode detected, proceeding automatically..."
else
    read -p "Continue with import? [y/N] " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Import cancelled"
        exit 0
    fi
fi

# Remove the symlink
echo -e "${GREEN}Removing symlink...${NC}"
rm "$ABS_PATH"

# Copy the content
echo -e "${GREEN}Copying content from shadow...${NC}"
if [[ -d "$SHADOW_SOURCE" ]]; then
    cp -r "$SHADOW_SOURCE" "$ABS_PATH"
    echo -e "${GREEN}✓ Imported directory${NC}"
else
    cp "$SHADOW_SOURCE" "$ABS_PATH"
    echo -e "${GREEN}✓ Imported file${NC}"
fi

# Check git status
if command -v git &> /dev/null && git rev-parse --git-dir &> /dev/null 2>&1; then
    echo ""
    echo -e "${YELLOW}Git status:${NC}"
    git status --short "$ABS_PATH"
    
    echo ""
    echo -e "${YELLOW}Note:${NC} Remember to:"
    echo "  1. Review the imported content"
    echo "  2. Update .gitignore if needed"
    echo "  3. Commit the changes to the repository"
fi

echo -e "${GREEN}Import complete!${NC}"