#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
# shadow-sync-excludes.sh - Update .git/info/exclude with shadow symlinks

# Colors for output (with NO_COLOR support)
if [ -n "${NO_COLOR:-}" ]; then
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
else
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
fi

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Get repo root
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null) || {
    echo -e "${RED}Error: Not in a git repository${NC}"
    exit 1
}

EXCLUDE_FILE="$REPO_ROOT/.git/info/exclude"
SHADOWFILE="$REPO_ROOT/.shadowfile"

echo -e "${BLUE}Shadow Sync Excludes${NC}"
echo "Updating: $EXCLUDE_FILE"
echo

# Ensure exclude file exists
mkdir -p "$(dirname "$EXCLUDE_FILE")"
touch "$EXCLUDE_FILE"

# Create temp file for new excludes
TEMP_EXCLUDE=$(mktemp)

# Copy existing non-shadow excludes to temp file
if [ -f "$EXCLUDE_FILE" ]; then
    # Remove old shadow-managed section if it exists
    sed '/^# BEGIN SHADOW MANAGED/,/^# END SHADOW MANAGED/d' "$EXCLUDE_FILE" > "$TEMP_EXCLUDE"
fi

# Start shadow managed section
echo "# BEGIN SHADOW MANAGED - Do not edit this section manually" >> "$TEMP_EXCLUDE"
echo "# Updated: $(date)" >> "$TEMP_EXCLUDE"

# Add .shadowfile itself
echo ".shadowfile" >> "$TEMP_EXCLUDE"

# Find all shadow repos from .shadowfile
if [ -f "$SHADOWFILE" ]; then
    echo "Reading shadow repositories from .shadowfile..."
    
    # Read shadow repos
    SHADOW_REPOS=()
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ -z "${line// }" ]] && continue
        
        # Convert to absolute path
        if [[ "$line" == /* ]]; then
            SHADOW_ABS="$line"
        else
            SHADOW_ABS="$REPO_ROOT/$line"
        fi
        
        # Normalize path
        SHADOW_ABS=$(realpath -m "$SHADOW_ABS")
        SHADOW_REPOS+=("$SHADOW_ABS")
        
        echo -e "  Shadow repo: ${GREEN}$line${NC}"
    done < "$SHADOWFILE"
    
    echo
    echo "Finding symlinks to shadow repositories..."
    
    # Find all symlinks in the repo
    SYMLINK_COUNT=0
    while IFS= read -r -d '' symlink; do
        # Get symlink target
        target=$(readlink "$symlink")
        
        # Convert to absolute path if relative
        if [[ "$target" != /* ]]; then
            symlink_dir=$(dirname "$symlink")
            target_abs=$(cd "$symlink_dir" && realpath -m "$target" 2>/dev/null) || continue
        else
            target_abs="$target"
        fi
        
        # Check if target is within any shadow repo
        for shadow in "${SHADOW_REPOS[@]}"; do
            if [[ "$target_abs" == "$shadow"* ]]; then
                # Get relative path from repo root
                rel_path="${symlink#$REPO_ROOT/}"
                echo "  Found: $rel_path -> ${target_abs#$shadow/}"
                echo "$rel_path" >> "$TEMP_EXCLUDE"
                SYMLINK_COUNT=$((SYMLINK_COUNT + 1))
                break
            fi
        done
    done < <(find "$REPO_ROOT" -type l -print0 2>/dev/null | grep -zv "^$REPO_ROOT/\.git")
    
    echo
    echo "Found $SYMLINK_COUNT shadow symlinks"
else
    echo -e "${YELLOW}No .shadowfile found${NC}"
fi

# End shadow managed section
echo "# END SHADOW MANAGED" >> "$TEMP_EXCLUDE"

# Replace exclude file
mv "$TEMP_EXCLUDE" "$EXCLUDE_FILE"

echo
echo -e "${GREEN}âœ“ Updated .git/info/exclude${NC}"

# Show summary
echo
echo "Excluded entries:"
sed -n '/^# BEGIN SHADOW MANAGED/,/^# END SHADOW MANAGED/p' "$EXCLUDE_FILE" | grep -v '^#' | while read -r line; do
    [ -n "$line" ] && echo "  - $line"
done